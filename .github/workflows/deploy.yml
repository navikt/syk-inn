name: Build & Deploy
on:
  push:
    paths-ignore:
      - docs/**
      - README.md

env:
  APP: syk-inn
  BASE_PATH: /samarbeidspartner/sykmelding

permissions:
  contents: read
  id-token: write
  packages: write

jobs:
  test-and-verify:
    name: Test, lint and verify
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
      - uses: navikt/tsm-workflows/actions/yarn@main
        with:
          READER_TOKEN: ${{ secrets.READER_TOKEN }}
      - run: yarn next typegen
      - run: yarn lint
      - run: yarn tsc
      - name: Test app
        run: yarn test
      - name: Knip it
        run: yarn knip --no-exit-code --reporter=markdown >> "$GITHUB_STEP_SUMMARY"
      - name: Test report
        if: always()
        run: |
          ./scripts/test-reporter.mjs ./test-results/vitest-report.json >> "$GITHUB_STEP_SUMMARY"

  build-dev:
    name: Build for dev
    runs-on: ubuntu-latest
    outputs:
      image: ${{ steps.build-and-publish.outputs.image }}
    steps:
      - uses: actions/checkout@v5
      - uses: navikt/tsm-workflows/actions/yarn@main
        with:
          READER_TOKEN: ${{ secrets.READER_TOKEN }}
      - uses: navikt/tsm-workflows/actions/next-to-gar@main
        id: build-and-publish
        with:
          build-command: 'yarn build'
          app: ${{ env.APP }}
          env: dev
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-demo:
    if: github.ref_name == 'main' || startsWith(github.ref_name, 'demo')
    name: Build for demo
    runs-on: ubuntu-latest
    outputs:
      image: ${{ steps.build-and-publish.outputs.image }}
    steps:
      - uses: actions/checkout@v5
      - uses: navikt/tsm-workflows/actions/yarn@main
        with:
          READER_TOKEN: ${{ secrets.READER_TOKEN }}
      - uses: navikt/tsm-workflows/actions/next-to-gar@main
        id: build-and-publish
        with:
          app: ${{ env.APP }}
          env: demo
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-prod:
    name: Build for prod
    runs-on: ubuntu-latest
    outputs:
      image: ${{ steps.build-and-publish.outputs.image }}
    steps:
      - uses: actions/checkout@v5
      - uses: navikt/tsm-workflows/actions/yarn@main
        with:
          READER_TOKEN: ${{ secrets.READER_TOKEN }}
      - uses: navikt/tsm-workflows/actions/next-to-gar@main
        id: build-and-publish
        with:
          app: ${{ env.APP }}
          env: prod
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  deploy-dev-main:
    name: Deploy main to dev
    if: github.ref_name == 'main'
    environment:
      name: dev
      url: https://www.ekstern.dev.nav.no/samarbeidspartner/sykmelding
    runs-on: ubuntu-latest
    needs: [build-dev, test-and-verify]
    steps:
      - uses: actions/checkout@v5
      - uses: nais/deploy/actions/deploy@v2
        env:
          CLUSTER: dev-gcp
          RESOURCE: .nais/nais-dev.yaml
          VAR: image=${{ needs.build-dev.outputs.image }}
          NAIS_DEPLOY_SUMMARY: false

  deploy-dev-branch:
    name: Deploy branch to dev
    if: startsWith(github.ref_name, 'dev/')
    environment:
      name: dev
      url: https://www.ekstern.dev.nav.no/samarbeidspartner/sykmelding
    runs-on: ubuntu-latest
    needs: [build-dev, test-and-verify]
    steps:
      - uses: actions/checkout@v5
      - uses: nais/deploy/actions/deploy@v2
        env:
          CLUSTER: dev-gcp
          RESOURCE: .nais/nais-dev.yaml
          VAR: image=${{ needs.build-dev.outputs.image }}
          NAIS_DEPLOY_SUMMARY: false

  deploy-demo-main:
    if: github.ref_name == 'main'
    name: Deploy main to demo
    environment:
      name: demo-main
      url: https://${{ env.APP }}.ekstern.dev.nav.no${{ env.BASE_PATH }}
    runs-on: ubuntu-latest
    needs: [build-demo, test-and-verify]
    steps:
      - uses: actions/checkout@v5
      - uses: nais/deploy/actions/deploy@v2
        env:
          CLUSTER: dev-gcp
          RESOURCE: .nais/nais-demo.yaml
          VAR: image=${{ needs.build-demo.outputs.image }},ingress=https://${{ env.APP }}.ekstern.dev.nav.no${{ env.BASE_PATH }},appname=${{ env.APP }},replicas=1,branchState=alive
          NAIS_DEPLOY_SUMMARY: false

  deploy-production:
    name: Deploy main to production
    if: github.ref_name == 'main'
    environment:
      name: production
      url: https://nav.no/samarbeidspartner/sykmelding
    runs-on: ubuntu-latest
    needs: [deploy-dev-main, run-playwright, build-prod]
    steps:
      - uses: actions/checkout@v5
      - uses: nais/deploy/actions/deploy@v2
        env:
          CLUSTER: prod-gcp
          RESOURCE: .nais/nais-prod.yaml
          VAR: image=${{ needs.build-prod.outputs.image }}
          NAIS_DEPLOY_SUMMARY: false

  prebuild-app-for-playwright:
    name: Prebuild image for sharded playwright tests
    runs-on: ubuntu-latest
    env:
      IMAGE_NAME: ${{ github.repository }}-e2e
      REGISTRY: ghcr.io
    steps:
      - uses: actions/checkout@v5
      - uses: navikt/tsm-workflows/actions/yarn@main
        with:
          READER_TOKEN: ${{ secrets.READER_TOKEN }}
      - name: Build e2e version of app
        run: |
          cp .nais/envs/.env.demo .env.production
          yarn build:e2e
        env:
          NEXT_PUBLIC_VERSION: ${{ github.sha }}
      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
    outputs:
      image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}

  run-playwright:
    needs: [prebuild-app-for-playwright]
    name: Playwright shard ${{ matrix.shardIndex }}
    runs-on: ubuntu-latest
    services:
      app:
        image: ${{ needs.prebuild-app-for-playwright.outputs.image }}
        ports: ['3000:3000']
    strategy:
      fail-fast: false
      matrix:
        shardIndex: [1, 2, 3, 4]
        shardTotal: [4]
    steps:
      - uses: actions/checkout@v5
      - uses: navikt/tsm-workflows/actions/yarn@main
        with:
          READER_TOKEN: ${{ secrets.READER_TOKEN }}
      - uses: navikt/tsm-workflows/actions/playwright/run@main
        with:
          shardIndex: ${{ matrix.shardIndex }}
          shardTotal: ${{ matrix.shardTotal }}

  merge-reports:
    if: ${{ !cancelled() }}
    needs: [run-playwright]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
      - uses: navikt/tsm-workflows/actions/playwright/report@main
